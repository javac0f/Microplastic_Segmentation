if torch.cuda.is_available():
    input_batch = input_batch.to('cuda')
    model = model.to('cuda')

    with torch.no_grad():
        output = model(input_batch)

    print(torch.round(output[0]))
    print(type(torch.round(output[0])))



train_epoch = TrainEpoch(
    config.MODEL, 
    loss = config.LOSS, 
    metrics = config.METRICS, 
    optimizer = config.OPTIMIZER,
    device = config.DEVICE,
    verbose = True,
)

valid_epoch = ValidEpoch(
    config.MODEL, 
    loss = config.LOSS, 
    metrics = config.METRICS, 
    device = config.DEVICE,
    verbose = True,
)



%%time

if(config.TRAINING == True):

    best_iou = 0.0
    train_logs_list, valid_logs_list = [], []

    for index in range(0, config.EPOCHS):

        # Perform training & validation
        print('\nEpoch: {}'.format(index))
        
        train_logs = train_epoch.run(train_loader)
        print("train logs done")

        valid_logs = valid_epoch.run(valid_loader)
        print('valid logs done')
        train_logs_list.append(train_logs)
        valid_logs_list.append(valid_logs)

        # Save model if a better val IoU score is obtained
        if best_iou_score < valid_logs['iou_score']:
            best_iou = valid_logs['iou_score']
            torch.save(model, './best_model.pth at iteration {}'.format(index))
            print('Model saved!')